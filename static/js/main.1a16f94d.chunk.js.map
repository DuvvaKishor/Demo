{"version":3,"sources":["components/ErrorView.js","components/ActionButtons.js","App.js","reportWebVitals.js","index.js"],"names":["ErrorView","_ref","onRetry","React","createElement","className","onClick","alt","src","ActionButtons","onCancel","onUpdate","API_URL","App","loading","setLoading","useState","error","setError","data","setData","lists","setLists","listOrder","setListOrder","selectedLists","setSelectedLists","newListView","setNewListView","newListKey","setNewListKey","displayedLists","setDisplayedLists","showCreateNewList","setShowCreateNewList","console","log","useEffect","fetchData","async","response","axios","get","groupedLists","reduce","acc","item","list_number","push","sortedListNumbers","Object","keys","sort","a","b","err","handleMoveItem","fromList","toList","prevLists","updatedLists","_objectSpread","updatedFromList","filter","i","id","some","[object Object]","RotatingLines","strokeColor","strokeWidth","animationDuration","width","visible","Fragment","type","handleCreateNewList","length","document","getElementById","textContent","firstList","secondList","map","list","parseInt","indexOf","toString","Math","max","Number","prev","prevOrder","firstIndex","updatedOrder","splice","concat","listNumber","index","_lists$listNumber","_lists$listNumber2","key","style","margin","name","description","handleCancel","handleUpdate","checked","includes","onChange","updatedSelection","num","handleListSelection","htmlFor","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.1a16f94d.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./index.css\";\n\nconst ErrorView = ({ onRetry }) => {\n  return (\n    <div className=\"error-view\">\n      <button onClick={onRetry}>\n        <img\n          alt=\"error view\"\n          src=\"https://assets.ccbp.in/frontend/content/react-js/list-creation-failure-lg-output.png\"\n        />\n      </button>\n    </div>\n  );\n};\n\nexport default ErrorView;\n","import React from \"react\";\nimport \"./index.css\";\n\nconst ActionButtons = ({ onCancel, onUpdate }) => {\n  return (\n    <div className=\"actions\">\n      <button onClick={onCancel}>Cancel</button>\n      <button onClick={onUpdate}>Update</button>\n    </div>\n  );\n};\n\nexport default ActionButtons;\n","import React, { useState, useEffect } from \"react\";\nimport { RotatingLines } from \"react-loader-spinner\";\nimport axios from \"axios\";\nimport ErrorView from \"./components/ErrorView\";\nimport ActionButtons from \"./components/ActionButtons\";\nimport \"./App.css\";\n\nconst API_URL = \"https://apis.ccbp.in/list-creation/lists\";\n\nfunction App() {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const [data, setData] = useState([]);\n  const [lists, setLists] = useState({});\n  const [listOrder, setListOrder] = useState([]);\n  const [selectedLists, setSelectedLists] = useState([]);\n  const [newListView, setNewListView] = useState(false);\n  const [newListKey, setNewListKey] = useState(null);\n  const [displayedLists, setDisplayedLists] = useState([]);\n  const [showCreateNewList, setShowCreateNewList] = useState(true);\n\n  console.log(data);\n  console.log(newListKey);\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    setLoading(true);\n    setError(false);\n    try {\n      const response = await axios.get(API_URL);\n      const { lists } = response.data;\n      const groupedLists = lists.reduce((acc, item) => {\n        if (!acc[item.list_number]) {\n          acc[item.list_number] = [];\n        }\n        acc[item.list_number].push(item);\n        return acc;\n      }, {});\n\n      const sortedListNumbers = Object.keys(groupedLists).sort((a, b) => a - b);\n      setData(lists);\n      setLists(groupedLists);\n      setListOrder(sortedListNumbers);\n      setLoading(false);\n    } catch (err) {\n      setError(true);\n      setLoading(false);\n    }\n  };\n\n  const handleListSelection = (listNumber) => {\n    const updatedSelection = selectedLists.includes(listNumber)\n      ? selectedLists.filter((num) => num !== listNumber)\n      : [...selectedLists, listNumber];\n    setSelectedLists(updatedSelection);\n  };\n\n  const handleCreateNewList = () => {\n    if (selectedLists.length !== 2) {\n      let alertForCheckEl = document.getElementById(\"alertForCheck\");\n      alertForCheckEl.textContent =\n        \"*You should select exactly 2 lists to create a new list\";\n      return;\n    }\n\n    setShowCreateNewList(false);\n\n    // Get the selected lists and sort based on their order in `listOrder`\n    const [firstList, secondList] = selectedLists\n      .map((list) => parseInt(list, 10))\n      .sort(\n        (a, b) =>\n          listOrder.indexOf(a.toString()) - listOrder.indexOf(b.toString())\n      );\n\n    // Generate a new list number for the new list\n    const nextListNumber = Math.max(...Object.keys(lists).map(Number)) + 1;\n    const newListKey = nextListNumber.toString();\n    setNewListKey(newListKey);\n\n    // Update `lists` and add the new list as empty initially\n    setLists((prev) => ({\n      ...prev,\n      [newListKey]: [],\n    }));\n\n    // Update `listOrder` to insert the new list between the selected lists\n    setListOrder((prevOrder) => {\n      const firstIndex = prevOrder.indexOf(firstList.toString());\n      const updatedOrder = [...prevOrder];\n      updatedOrder.splice(firstIndex + 1, 0, newListKey); // Insert after the first list\n      return updatedOrder;\n    });\n\n    setNewListView(true);\n    // Update `displayedLists` to only show the selected and new lists\n    setDisplayedLists([\n      firstList.toString(),\n      newListKey,\n      secondList.toString(),\n    ]);\n\n    setNewListView(true);\n  };\n\n  const handleMoveItem = (item, fromList, toList) => {\n    setLists((prevLists) => {\n      const updatedLists = { ...prevLists };\n\n      // Remove the item from the source list\n      const updatedFromList = (updatedLists[fromList] || []).filter(\n        (i) => i.id !== item.id\n      );\n\n      // Ensure the target list exists in the `lists` object\n      if (!updatedLists[toList]) {\n        updatedLists[toList] = [];\n      }\n\n      // Add the item to the target list\n      if (!updatedLists[toList].some((i) => i.id === item.id)) {\n        updatedLists[toList].push(item);\n      }\n\n      // Return the updated lists\n      return {\n        ...updatedLists,\n        [fromList]: updatedFromList, // Update the source list\n        [toList]: updatedLists[toList], // Update the target list\n      };\n    });\n  };\n\n  const handleCancel = () => {\n    setShowCreateNewList(true);\n    setNewListView(false);\n    setSelectedLists([]);\n    fetchData();\n  };\n\n  const handleUpdate = () => {\n    setShowCreateNewList(true);\n    setNewListView(false);\n    setSelectedLists([]);\n\n    setLists((prevLists) => {\n      const updatedLists = { ...prevLists };\n      if (updatedLists[\"3\"]) {\n        updatedLists[\"3\"] = [...updatedLists[\"3\"]];\n      }\n      return updatedLists;\n    });\n\n    setListOrder((prevOrder) => [...prevOrder]);\n\n    // Restore all lists in the displayed order\n    setDisplayedLists([...listOrder]);\n  };\n\n  return (\n    <div className=\"App\">\n      {loading ? (\n        <div className=\"loader\">\n          <RotatingLines\n            strokeColor=\"grey\"\n            strokeWidth=\"5\"\n            animationDuration=\"0.75\"\n            width=\"96\"\n            visible={true}\n          />\n        </div>\n      ) : error ? (\n        <ErrorView onRetry={fetchData} />\n      ) : (\n        <div className=\"main-container\">\n          <div className=\"head-btn-container\">\n            {showCreateNewList && (\n              <>\n                <h1 className=\"main-heading\">List Creation</h1>\n                <button\n                  type=\"button\"\n                  className=\"add-new-list-button\"\n                  onClick={handleCreateNewList}\n                >\n                  Create a New List\n                </button>\n              </>\n            )}\n            <span id=\"alertForCheck\"></span>\n          </div>\n\n          <div className={`lists-container ${newListView ? \"row\" : \"\"}`}>\n            {newListView ? (\n              <div>\n                <div className=\"list-creation-view\">\n                  {displayedLists.map((listNumber, index) => (\n                    <div key={listNumber} style={{ margin: \"16px\" }}>\n                      <div className=\"list-container\">\n                        <h3>\n                          List {listNumber} ({lists[listNumber]?.length || 0})\n                        </h3>\n                        <div className=\"list-item-container\">\n                          {lists[listNumber]?.map((item) => (\n                            <div key={item.id} className=\"list-item\">\n                              <span className=\"name\">{item.name}</span>\n                              <span className=\"description\">\n                                {item.description}\n                              </span>\n\n                              {/* Arrow buttons for moving items */}\n                              <div className=\"arrow-buttons\">\n                                {index > 0 && (\n                                  <button\n                                    className=\"arrow\"\n                                    onClick={() =>\n                                      handleMoveItem(\n                                        item,\n                                        listNumber,\n                                        displayedLists[index - 1]\n                                      )\n                                    }\n                                  >\n                                    ←\n                                  </button>\n                                )}\n                                {index < displayedLists.length - 1 && (\n                                  <button\n                                    className=\"arrow\"\n                                    onClick={() =>\n                                      handleMoveItem(\n                                        item,\n                                        listNumber,\n                                        displayedLists[index + 1]\n                                      )\n                                    }\n                                  >\n                                    →\n                                  </button>\n                                )}\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n\n                <ActionButtons\n                  onCancel={handleCancel}\n                  onUpdate={handleUpdate}\n                />\n              </div>\n            ) : (\n              <>\n                <div className=\"list-selection\">\n                  {listOrder.map((listNumber) => (\n                    <div key={listNumber} className=\"list-container\">\n                      <div className=\"check-heading\">\n                        <input\n                          id={`myCheckbox + ${listNumber}`}\n                          type=\"checkbox\"\n                          checked={selectedLists.includes(listNumber)}\n                          onChange={() => handleListSelection(listNumber)}\n                        />\n                        <label\n                          htmlFor={`myCheckbox + ${listNumber}`}\n                          className=\"list-head\"\n                        >\n                          List {listNumber}\n                        </label>\n                      </div>\n                      {lists[listNumber].map((item) => (\n                        <div className=\"list-item\" key={item.id}>\n                          <span className=\"name\">{item.name}</span>\n                          <span className=\"description\">\n                            {item.description}\n                          </span>\n                        </div>\n                      ))}\n                    </div>\n                  ))}\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}